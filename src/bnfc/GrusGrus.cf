

-- Program


comment "//" ;
entrypoints Body ;

Body. Body  ::= [Decl] Exp ;

terminator Decl "" ;


-- Declarations


DPut.   Decl ::= "put" Exp ";" ;
DVal.   Decl ::= "val" TypedIdent "=" Exp ";" ;
DFun.   Decl ::= "fun" Ident "(" [TypedIdent] ")" "->" Type "{" Body "}" ;

TypedIdent.     TypedIdent  ::= Ident ":" Type ;

separator TypedIdent "," ;


-- Expressions


EIfte.          Exp   ::= "if" Exp "then" Exp "else" Exp ;
-- ECase/EMatch
EOr.            Exp2  ::= Exp2 "||" Exp3 ;
EAnd.           Exp3  ::= Exp3 "&&" Exp4 ;
EEq.            Exp4  ::= Exp4 "==" Exp5 ;
ENeq.           Exp4  ::= Exp4 "!=" Exp5 ;
ELt.            Exp5  ::= Exp5 "<" Exp6 ;
EGt.            Exp5  ::= Exp5 ">" Exp6 ;
ELe.            Exp5  ::= Exp5 "<=" Exp6 ;
EGe.            Exp5  ::= Exp5 ">=" Exp6 ;
EAdd.           Exp6  ::= Exp6 "+" Exp7 ;
ESub.           Exp6  ::= Exp6 "-" Exp7 ;
EMult.          Exp7  ::= Exp7 "*" Exp8 ;
EDiv.           Exp7  ::= Exp7 "/" Exp8 ;
EMod.           Exp7  ::= Exp7 "%" Exp8 ;
ENot.           Exp8 ::= "!" Exp9 ;
ECallIdent.     Exp9  ::= Ident "(" [Exp] ")" ;
ECallExp.       Exp9  ::= Exp "<~" "(" [Exp] ")" ;
ELambda.        Exp9 ::= "(" "\\" [TypedIdent] "~>" Body ")" ;
EInt.           Exp9 ::= Integer ;
EBool.          Exp9 ::= Boolean ;
EUnit.          Exp9 ::= Unit ;
EVar.           Exp9 ::= Ident ;
-- todo lambda

separator Exp "," ;
coercions Exp 9 ;


-- Primitive types


BTrue.      Boolean ::= "True" ;
BFalse.     Boolean ::= "False" ;

Unit.       Unit ::= "Unit" ;


-- Types


TInt.   Type ::= "Int" ;
TBool.  Type ::= "Bool" ;
TArrow. Type ::= Type "->" Type ; -- todo ??