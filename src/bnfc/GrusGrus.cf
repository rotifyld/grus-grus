-- Identifiers


token UIdent (upper (letter | digit | '_')*) ;


-- Program


comment "//" ;

entrypoints Body ;

Body. Body  ::= [Decl] Exp ;

terminator Decl "" ;


-- Declarations


DPut.   Decl ::= "put" Exp ";" ;
DVal.   Decl ::= "val" TypedIdent "=" Exp ";" ;
DFun.   Decl ::= "fun" Ident "(" [TypedIdent] ")" ":" ParserType "{" Body "}" ;
DAlg.   Decl ::= "alg" UIdent "=" [TypeAlgConstr] ";" ;

TypedIdent.     TypedIdent  ::= Ident ":" ParserType ;
separator TypedIdent "," ;

separator TypeAlgConstr "|" ;



-- Expressions


EIfte.          Exp   ::= "if" Exp "then" Exp "else" Exp ;
ECase.          Exp   ::= "case" Exp "of" "{" [Case] "}" ;
EOr.            Exp2  ::= Exp2 "||" Exp3 ;
EAnd.           Exp3  ::= Exp3 "&&" Exp4 ;
EEq.            Exp4  ::= Exp4 "==" Exp5 ;
ENeq.           Exp4  ::= Exp4 "!=" Exp5 ;
ELt.            Exp5  ::= Exp5 "<" Exp6 ;
EGt.            Exp5  ::= Exp5 ">" Exp6 ;
ELe.            Exp5  ::= Exp5 "<=" Exp6 ;
EGe.            Exp5  ::= Exp5 ">=" Exp6 ;
EAdd.           Exp6  ::= Exp6 "+" Exp7 ;
ESub.           Exp6  ::= Exp6 "-" Exp7 ;
EMult.          Exp7  ::= Exp7 "*" Exp8 ;
EDiv.           Exp7  ::= Exp7 "/" Exp8 ;
EMod.           Exp7  ::= Exp7 "%" Exp8 ;
ECall.          Exp8  ::= Exp8 "(" [Exp] ")" ;
ELambda.        Exp9 ::= "(" "\\" [TypedIdent] "~>" Body ")" ;
EInt.           Exp9 ::= Integer ;
EBool.          Exp9 ::= Boolean ;
EVar.           Exp9 ::= Ident ;
EAlg.           Exp9 ::= UIdent ;

separator Exp "," ;
coercions Exp 9 ;

-- Case Expression

Case.           Case ::= Exp "~>" Exp ;
separator Case ";" ;


-- Primitive types


BTrue.      Boolean ::= "True" ;
BFalse.     Boolean ::= "False" ;

Unit.       Unit ::= "Unit" ;


-- Types


PTArrow.         ParserType  ::= ParserType2 "->" ParserType ;
PTInt.           ParserType2 ::= "Int" ;
PTBool.          ParserType2 ::= "Bool" ;
PTAlg.           ParserType2 ::= UIdent ;


separator ParserType "," ;
coercions ParserType 2 ;


-- Algbraic types


TAC.        TypeAlgConstr ::= UIdent ;
TACArgs.    TypeAlgConstr ::= UIdent "(" [ParserType] ")" ;