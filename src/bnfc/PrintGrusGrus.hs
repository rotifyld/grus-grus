{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintGrusGrus where

-- pretty-printer generated by the BNF converter

import AbsGrusGrus
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print LIdent where
  prt _ (LIdent i) = doc (showString ( i))


instance Print UIdent where
  prt _ (UIdent i) = doc (showString ( i))



instance Print (Body a) where
  prt i e = case e of
    Body _ decls expr -> prPrec i 0 (concatD [prt 0 decls, prt 0 expr])

instance Print (Decl a) where
  prt i e = case e of
    DPut _ expr -> prPrec i 0 (concatD [doc (showString "put"), prt 0 expr, doc (showString ";")])
    DVal _ typedident expr -> prPrec i 0 (concatD [doc (showString "val"), prt 0 typedident, doc (showString "="), prt 0 expr, doc (showString ";")])
    DFun _ lident typedidents parsertype body -> prPrec i 0 (concatD [doc (showString "fun"), prt 0 lident, doc (showString "("), prt 0 typedidents, doc (showString ")"), doc (showString "->"), prt 0 parsertype, doc (showString "{"), prt 0 body, doc (showString "}")])
    DAlg _ uident typealgconstrs -> prPrec i 0 (concatD [doc (showString "alg"), prt 0 uident, doc (showString "="), prt 0 typealgconstrs, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (TypedIdent a) where
  prt i e = case e of
    TypedIdent _ lident parsertype -> prPrec i 0 (concatD [prt 0 lident, doc (showString ":"), prt 0 parsertype])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (Exp a) where
  prt i e = case e of
    EIfte _ exp1 exp2 exp3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp1, doc (showString "then"), prt 0 exp2, doc (showString "else"), prt 0 exp3])
    ECase _ expr cases -> prPrec i 0 (concatD [doc (showString "case"), prt 0 expr, doc (showString "of"), doc (showString "{"), prt 0 cases, doc (showString "}")])
    EOr _ exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "||"), prt 3 exp2])
    EAnd _ exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "&&"), prt 4 exp2])
    EEq _ exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "=="), prt 5 exp2])
    ENeq _ exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "!="), prt 5 exp2])
    ELt _ exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "<"), prt 6 exp2])
    EGt _ exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString ">"), prt 6 exp2])
    ELe _ exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "<="), prt 6 exp2])
    EGe _ exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString ">="), prt 6 exp2])
    EAdd _ exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "+"), prt 7 exp2])
    ESub _ exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "-"), prt 7 exp2])
    EMult _ exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "*"), prt 8 exp2])
    EDiv _ exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "/"), prt 8 exp2])
    EMod _ exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "%"), prt 8 exp2])
    ECall _ expr exps -> prPrec i 8 (concatD [prt 8 expr, doc (showString "("), prt 0 exps, doc (showString ")")])
    ELambda _ typedidents body -> prPrec i 9 (concatD [doc (showString "("), doc (showString "\\"), prt 0 typedidents, doc (showString "~>"), prt 0 body, doc (showString ")")])
    EInt _ n -> prPrec i 9 (concatD [prt 0 n])
    EBool _ boolean -> prPrec i 9 (concatD [prt 0 boolean])
    EUnit _ unit -> prPrec i 9 (concatD [prt 0 unit])
    EVar _ lident -> prPrec i 9 (concatD [prt 0 lident])
    EAlg _ uident -> prPrec i 9 (concatD [prt 0 uident])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (Case a) where
  prt i e = case e of
    Case _ exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "~>"), prt 0 exp2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print (Boolean a) where
  prt i e = case e of
    BTrue _ -> prPrec i 0 (concatD [doc (showString "True")])
    BFalse _ -> prPrec i 0 (concatD [doc (showString "False")])

instance Print (Unit a) where
  prt i e = case e of
    Unit _ -> prPrec i 0 (concatD [doc (showString "Unit")])

instance Print (ParserType a) where
  prt i e = case e of
    PTArrow _ parsertype1 parsertype2 -> prPrec i 0 (concatD [prt 2 parsertype1, doc (showString "->"), prt 0 parsertype2])
    PTArrowMult _ parsertype1 parsertypes parsertype2 -> prPrec i 0 (concatD [doc (showString "("), prt 0 parsertype1, doc (showString ","), prt 0 parsertypes, doc (showString ")"), doc (showString "->"), prt 0 parsertype2])
    PTInt _ -> prPrec i 2 (concatD [doc (showString "Int")])
    PTBool _ -> prPrec i 2 (concatD [doc (showString "Bool")])
    PTAlg _ uident -> prPrec i 2 (concatD [prt 0 uident])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (TypeAlgConstr a) where
  prt i e = case e of
    TAC _ uident -> prPrec i 0 (concatD [prt 0 uident])
    TACArgs _ uident parsertypes -> prPrec i 0 (concatD [prt 0 uident, doc (showString "("), prt 0 parsertypes, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "|"), prt 0 xs])

