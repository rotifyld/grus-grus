-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrusGrus where
import AbsGrusGrus
import LexGrusGrus
import ErrM

}

%name pBody Body
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '-' { PT _ (TS _ 9) }
  '->' { PT _ (TS _ 10) }
  '/' { PT _ (TS _ 11) }
  ':' { PT _ (TS _ 12) }
  ';' { PT _ (TS _ 13) }
  '<' { PT _ (TS _ 14) }
  '<=' { PT _ (TS _ 15) }
  '=' { PT _ (TS _ 16) }
  '==' { PT _ (TS _ 17) }
  '>' { PT _ (TS _ 18) }
  '>=' { PT _ (TS _ 19) }
  'Bool' { PT _ (TS _ 20) }
  'False' { PT _ (TS _ 21) }
  'Int' { PT _ (TS _ 22) }
  'True' { PT _ (TS _ 23) }
  'Unit' { PT _ (TS _ 24) }
  'else' { PT _ (TS _ 25) }
  'fun' { PT _ (TS _ 26) }
  'if' { PT _ (TS _ 27) }
  'put' { PT _ (TS _ 28) }
  'then' { PT _ (TS _ 29) }
  'val' { PT _ (TS _ 30) }
  '{' { PT _ (TS _ 31) }
  '||' { PT _ (TS _ 32) }
  '}' { PT _ (TS _ 33) }
  L_ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }

%%

Ident   :: { Ident }
Ident    : L_ident  { Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

Body :: { Body }
Body : ListDecl Exp { AbsGrusGrus.Body (reverse $1) $2 }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] } | ListDecl Decl { flip (:) $1 $2 }
Decl :: { Decl }
Decl : 'put' Exp ';' { AbsGrusGrus.DPut $2 }
     | 'val' Ident ':' Type '=' Exp ';' { AbsGrusGrus.DVal $2 $4 $6 }
     | 'fun' Ident '(' Ident ':' Type ')' '->' Type '{' Body '}' { AbsGrusGrus.DFun1 $2 $4 $6 $9 $11 }
Exp :: { Exp }
Exp : 'if' Exp 'then' Exp 'else' Exp { AbsGrusGrus.EIfte $2 $4 $6 }
    | Exp1 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '||' Exp3 { AbsGrusGrus.EOr $1 $3 } | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '&&' Exp4 { AbsGrusGrus.EAnd $1 $3 } | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '==' Exp5 { AbsGrusGrus.EEq $1 $3 }
     | Exp4 '!=' Exp5 { AbsGrusGrus.ENeq $1 $3 }
     | Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 '<' Exp6 { AbsGrusGrus.ELt $1 $3 }
     | Exp5 '>' Exp6 { AbsGrusGrus.EGt $1 $3 }
     | Exp5 '<=' Exp6 { AbsGrusGrus.ELe $1 $3 }
     | Exp5 '>=' Exp6 { AbsGrusGrus.EGe $1 $3 }
     | Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp6 '+' Exp7 { AbsGrusGrus.EAdd $1 $3 }
     | Exp6 '-' Exp7 { AbsGrusGrus.ESub $1 $3 }
     | Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp7 '*' Exp8 { AbsGrusGrus.EMult $1 $3 }
     | Exp7 '/' Exp8 { AbsGrusGrus.EDiv $1 $3 }
     | Exp7 '%' Exp8 { AbsGrusGrus.EMod $1 $3 }
     | Exp8 { $1 }
Exp8 :: { Exp }
Exp8 : '!' Exp9 { AbsGrusGrus.ENot $2 } | Exp9 { $1 }
Exp9 :: { Exp }
Exp9 : Ident '(' Exp ')' { AbsGrusGrus.ECall1 $1 $3 }
     | Integer { AbsGrusGrus.EInt $1 }
     | Boolean { AbsGrusGrus.EBool $1 }
     | Unit { AbsGrusGrus.EUnit $1 }
     | Ident { AbsGrusGrus.EVar $1 }
     | '(' Exp ')' { $2 }
Exp1 :: { Exp }
Exp1 : Exp2 { $1 }
Boolean :: { Boolean }
Boolean : 'True' { AbsGrusGrus.BTrue }
        | 'False' { AbsGrusGrus.BFalse }
Unit :: { Unit }
Unit : 'Unit' { AbsGrusGrus.Unit }
Type :: { Type }
Type : 'Int' { AbsGrusGrus.TInt }
     | 'Bool' { AbsGrusGrus.TBool }
     | Type '->' Type { AbsGrusGrus.TArrow $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

