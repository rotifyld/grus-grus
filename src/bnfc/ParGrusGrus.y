-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrusGrus where
import AbsGrusGrus
import LexGrusGrus
import ErrM

}

%name pBody Body
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '%' { PT _ (TS _ 2) }
  '&&' { PT _ (TS _ 3) }
  '(' { PT _ (TS _ 4) }
  ')' { PT _ (TS _ 5) }
  '*' { PT _ (TS _ 6) }
  '+' { PT _ (TS _ 7) }
  ',' { PT _ (TS _ 8) }
  '-' { PT _ (TS _ 9) }
  '->' { PT _ (TS _ 10) }
  '/' { PT _ (TS _ 11) }
  ':' { PT _ (TS _ 12) }
  ';' { PT _ (TS _ 13) }
  '<' { PT _ (TS _ 14) }
  '<=' { PT _ (TS _ 15) }
  '=' { PT _ (TS _ 16) }
  '==' { PT _ (TS _ 17) }
  '>' { PT _ (TS _ 18) }
  '>=' { PT _ (TS _ 19) }
  'Bool' { PT _ (TS _ 20) }
  'False' { PT _ (TS _ 21) }
  'Int' { PT _ (TS _ 22) }
  'True' { PT _ (TS _ 23) }
  'Unit' { PT _ (TS _ 24) }
  '\\' { PT _ (TS _ 25) }
  'alg' { PT _ (TS _ 26) }
  'case' { PT _ (TS _ 27) }
  'else' { PT _ (TS _ 28) }
  'fun' { PT _ (TS _ 29) }
  'if' { PT _ (TS _ 30) }
  'of' { PT _ (TS _ 31) }
  'put' { PT _ (TS _ 32) }
  'then' { PT _ (TS _ 33) }
  'val' { PT _ (TS _ 34) }
  '{' { PT _ (TS _ 35) }
  '|' { PT _ (TS _ 36) }
  '||' { PT _ (TS _ 37) }
  '}' { PT _ (TS _ 38) }
  '~>' { PT _ (TS _ 39) }
  L_integ  { PT _ (TI $$) }
  L_LIdent { PT _ (T_LIdent $$) }
  L_UIdent { PT _ (T_UIdent $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

LIdent :: { LIdent}
LIdent  : L_LIdent { LIdent ($1)}

UIdent :: { UIdent}
UIdent  : L_UIdent { UIdent ($1)}

Body :: { Body }
Body : ListDecl Exp { AbsGrusGrus.Body (reverse $1) $2 }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] } | ListDecl Decl { flip (:) $1 $2 }
Decl :: { Decl }
Decl : 'put' Exp ';' { AbsGrusGrus.DPut $2 }
     | 'val' TypedIdent '=' Exp ';' { AbsGrusGrus.DVal $2 $4 }
     | 'fun' LIdent '(' ListTypedIdent ')' '->' ParserType '{' Body '}' { AbsGrusGrus.DFun $2 $4 $7 $9 }
     | 'alg' UIdent '=' ListTypeAlgConstr ';' { AbsGrusGrus.DAlg $2 $4 }
TypedIdent :: { TypedIdent }
TypedIdent : LIdent ':' ParserType { AbsGrusGrus.TypedIdent $1 $3 }
ListTypedIdent :: { [TypedIdent] }
ListTypedIdent : {- empty -} { [] }
               | TypedIdent { (:[]) $1 }
               | TypedIdent ',' ListTypedIdent { (:) $1 $3 }
ListTypeAlgConstr :: { [TypeAlgConstr] }
ListTypeAlgConstr : {- empty -} { [] }
                  | TypeAlgConstr { (:[]) $1 }
                  | TypeAlgConstr '|' ListTypeAlgConstr { (:) $1 $3 }
Exp :: { Exp }
Exp : 'if' Exp 'then' Exp 'else' Exp { AbsGrusGrus.EIfte $2 $4 $6 }
    | 'case' Exp 'of' '{' ListCase '}' { AbsGrusGrus.ECase $2 $5 }
    | Exp1 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '||' Exp3 { AbsGrusGrus.EOr $1 $3 } | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '&&' Exp4 { AbsGrusGrus.EAnd $1 $3 } | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '==' Exp5 { AbsGrusGrus.EEq $1 $3 }
     | Exp4 '!=' Exp5 { AbsGrusGrus.ENeq $1 $3 }
     | Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 '<' Exp6 { AbsGrusGrus.ELt $1 $3 }
     | Exp5 '>' Exp6 { AbsGrusGrus.EGt $1 $3 }
     | Exp5 '<=' Exp6 { AbsGrusGrus.ELe $1 $3 }
     | Exp5 '>=' Exp6 { AbsGrusGrus.EGe $1 $3 }
     | Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp6 '+' Exp7 { AbsGrusGrus.EAdd $1 $3 }
     | Exp6 '-' Exp7 { AbsGrusGrus.ESub $1 $3 }
     | Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp7 '*' Exp8 { AbsGrusGrus.EMult $1 $3 }
     | Exp7 '/' Exp8 { AbsGrusGrus.EDiv $1 $3 }
     | Exp7 '%' Exp8 { AbsGrusGrus.EMod $1 $3 }
     | Exp8 { $1 }
Exp8 :: { Exp }
Exp8 : Exp8 '(' ListExp ')' { AbsGrusGrus.ECall $1 $3 }
     | Exp9 { $1 }
Exp9 :: { Exp }
Exp9 : '(' '\\' ListTypedIdent '~>' Body ')' { AbsGrusGrus.ELambda $3 $5 }
     | Integer { AbsGrusGrus.EInt $1 }
     | Boolean { AbsGrusGrus.EBool $1 }
     | Unit { AbsGrusGrus.EUnit $1 }
     | LIdent { AbsGrusGrus.EVar $1 }
     | UIdent { AbsGrusGrus.EAlg $1 }
     | '(' Exp ')' { $2 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Exp1 :: { Exp }
Exp1 : Exp2 { $1 }
Case :: { Case }
Case : Exp '~>' Exp { AbsGrusGrus.Case $1 $3 }
ListCase :: { [Case] }
ListCase : {- empty -} { [] }
         | Case { (:[]) $1 }
         | Case ';' ListCase { (:) $1 $3 }
Boolean :: { Boolean }
Boolean : 'True' { AbsGrusGrus.BTrue }
        | 'False' { AbsGrusGrus.BFalse }
Unit :: { Unit }
Unit : 'Unit' { AbsGrusGrus.Unit }
ParserType :: { ParserType }
ParserType : ParserType2 '->' ParserType { AbsGrusGrus.PTArrow $1 $3 }
           | '(' ParserType ',' ListParserType ')' '->' ParserType { AbsGrusGrus.PTArrowMult $2 $4 $7 }
           | ParserType1 { $1 }
ParserType2 :: { ParserType }
ParserType2 : 'Int' { AbsGrusGrus.PTInt }
            | 'Bool' { AbsGrusGrus.PTBool }
            | 'Unit' { AbsGrusGrus.PTBool }
            | UIdent { AbsGrusGrus.PTAlg $1 }
            | '(' ParserType ')' { $2 }
ListParserType :: { [ParserType] }
ListParserType : {- empty -} { [] }
               | ParserType { (:[]) $1 }
               | ParserType ',' ListParserType { (:) $1 $3 }
ParserType1 :: { ParserType }
ParserType1 : ParserType2 { $1 }
TypeAlgConstr :: { TypeAlgConstr }
TypeAlgConstr : UIdent { AbsGrusGrus.TAC $1 }
              | UIdent '(' ListParserType ')' { AbsGrusGrus.TACArgs $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

