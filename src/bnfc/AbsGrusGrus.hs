-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsGrusGrus where

newtype LIdent = LIdent String
  deriving (Eq, Ord, Show, Read)

newtype UIdent = UIdent String
  deriving (Eq, Ord, Show, Read)

data Body = Body [Decl] Exp
  deriving (Eq, Ord, Show, Read)

data Decl
    = DPut Exp
    | DVal TypedIdent Exp
    | DFun LIdent [TypedIdent] ParserType Body
    | DAlg UIdent [TypeAlgConstr]
  deriving (Eq, Ord, Show, Read)

data TypedIdent = TypedIdent LIdent ParserType
  deriving (Eq, Ord, Show, Read)

data Exp
    = EIfte Exp Exp Exp
    | ECase Exp [Case]
    | EOr Exp Exp
    | EAnd Exp Exp
    | EEq Exp Exp
    | ENeq Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELe Exp Exp
    | EGe Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMult Exp Exp
    | EDiv Exp Exp
    | EMod Exp Exp
    | ECall Exp [Exp]
    | ELambda [TypedIdent] Body
    | EInt Integer
    | EBool Boolean
    | EUnit Unit
    | EVar LIdent
    | EAlg UIdent
  deriving (Eq, Ord, Show, Read)

data Case = Case Exp Exp
  deriving (Eq, Ord, Show, Read)

data Boolean = BTrue | BFalse
  deriving (Eq, Ord, Show, Read)

data Unit = Unit
  deriving (Eq, Ord, Show, Read)

data ParserType
    = PTArrow ParserType ParserType
    | PTArrowMult ParserType [ParserType] ParserType
    | PTInt
    | PTBool
    | PTAlg UIdent
  deriving (Eq, Ord, Show, Read)

data TypeAlgConstr = TAC UIdent | TACArgs UIdent [ParserType]
  deriving (Eq, Ord, Show, Read)

